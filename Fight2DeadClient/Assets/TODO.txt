TODAY: 
	WHAT I REALLY WANT IN THE 4 PLAYER SYSTEM ?? 
		init: 
			team 1 player 1: player 1

		start game: 
			team 1: 	
				if player 1 hit tab -> transform -> let player 2 play
					what if player 1 hit again -> still let player 2 player -> no toggle 
				if player 2 hit tab -> transform -> let player 1 play
			team 2: 
				if player 3 hit tab -> transform -> let player 4 player
				if player 4 hit tab -> transform -> let player 3 player

			-> the decision to switch is in the hand of the one who is currently control 

		1. THE CURRENTLY PLAYER ON EACH TEAM NEED TO BE IN SYNC [] (SHOW THE CURRENT PLAYING ON SCREEN AS WELL)
		2. UPDATE THE CURRENTLY CHARACTER ON SCREEN []
		3. SEPARATE CONTROL FILE FOR EACH PLAYER [] 
		4. if (playerId == 1) {input.getkey()} []

		the one not in control can't control: 
			-> how to block the control of the one who is not the current player 
				-> if the character is not active -> can't control player character 
				-> block the keyboard of the not playing character as well -> each character need it's own control file ? 

		WHAT DOES PLAYER IN CONTROL REALLY MEANS ? 
			the one who actually send state information


	FIX THE STUCK SERVER [] -> the server is not stuck -> the client is stuck 

	GET STUCK -> make the loop keep running (2h) []

	GLOBAL MODE: 
		LAG WHEN PLAYING IN GLOBAL MODE, -> lerp between position (2h) []
		FIX THESE ASAP 
		-> tong cong 8 tieng dong ho 


	LET'S UPDATE THE GAME CONTROL FIRST -> 2 players [X]

	SEND TRANSFORM INFO TO THE OTHER PLAYER AS WELL -> whose turn to control the game 
		how 2 player character transition should work ??  updating the state between the 2 is hard [X]
		how 4 player control should works ?? 
			only 1 person (in each team) can control at one time 


	MAKE THE LAN MODE TRULY WORKS [], can play on different computers (2h) []
		-> these 2 should be done today

	-> HAVE TO DONE TOMORROW


	OPENSLL ENCRYPTION []
	-> the other day

	DATABASE encryption password ?? 

	KIP KO ?? 





	LET'S SEE HOW EVERYTHING SHOULD WORKS ?
		the same set of keys to control 
		2players: 
			-> attach control script into player dynamically 

			if on player1 window -> player 1 move 
			if on player2 window -> player 2 move 

		4players: 

	IF CHOOSE THE SAME CHARACTER ON THEN THE CAMERA IS FLICKERING SINCE THERE ARE ONLY ONE CHARACTER ON THE SCREEN  

	4 PLAYER MODE HAVE TO BE PLAYABLE (2h) []
		-> decide how 4 player control works ?  (player switch and stuff like that)


	QUIT MESSAGE AND HANDLE ROOM EXIT PROPERLY (2H) [X] -> @temporary done :v 
		-> how server should response to quit event of client ?? 
		-> how client should repsonse to quit event of them or other players quit ?? 

		when could a player exit the game:  
			after they finish a match -> send tcp message to quit and remove them from room 


			*ONLY HANDLE THE GLOBAL FOR THE MOMENT 
			
			WHAT HAPPPENED TO THE SERVER WHEN CLOSE THE GAME RIGHT NOW ? 
				*currently nothing happen when close in the global 

			-> works on global first (1h) 
				-> send tcp message when close the game 
			-> then LAN (1h) 

	-> DONE ALL TODAY -> 8 hours of work 

	MAKE THE LAN MODE TRULY WORKS [], can play on different computers (2h) []
	-> these 2 should be done today

	OPENSLL ENCRYPTION []
	-> the other day

	have 2 days left 

TODO: 

DONE: 
	4 PLAYER CHOSING CHARACTER SYNC FROM CHOOSEN CHARACTER AND MAP AND STUFF LIKE THAT (2h) [X]
		-> photoshop the little thing the fly around for Luffy  

	FIND OUT THE CORRECT PATH TO LANSERVER FOLDER (1h) [X] 
	FIX THE GLOBAL UDP CONNECTION [X]
	GLOBAL SERVER TCP CLOSE AND STUFF (2H) [X] 
	SEND FIGHTING DATA TO SERVER AND UPDATE IT ON THE OTHER SCREEN (2h) [X]

	actually find the LAN SERVER when join (1h) [X]
	// ACTUALLY FIX THE SAMPLE GAMEPLAY SCENE FIRST :v  (1h) [X] 
/*
TODO: Determine what the client received and format for each of them 

How many scenes with network and its received format:  
	WAITING FOR MATCH, received format: "rid:{},pid:{}" 

	LOBBY, received format: "pid:{},stat{}"

	CHOOSE CHARACTER, received format: "pid:{},cn:{}" // cn = character name

	MAP SELECT, received format: "pid:{},mn:{}" // mn = map name 

	LOADING SCREEN, received format: "" // 

Which scenes actually received quit status of other players -> scenes after having rooms (Server other clients quit message to client)
(lobby, choose character, map select)

-> TODO: HANDLE OTHER CLIENTS QUIT MESSAGES TO THIS CLIENT 


[CLIENT TO SERVER PLAYER'S QUIT MESSAGE] ALREADY HANDLED 

 */

put the quit code to the connection singleton (2h) []
-> reuse the quit code for every scene 

