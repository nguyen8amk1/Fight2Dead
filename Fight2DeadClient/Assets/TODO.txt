TODAY: 
	// FIX THE CAMERA: 
		// the camera has to be 16:9 
		// the width is the distance between 2 players -> the height 
		// keep the 2 players in the middle vertically 

	// TODO: determine who is player 1 and who is player 2 
	// because there is a problem where the other player get locked at 0 0  
	// -> figure out how to sync the position of the two 
	// what are the problems at the moment: 
		// @todo, actually run it and figure it out ? 

	// things to do:
		// for now let's decide gaara is player 1 
		// and luffy is player 2 
		// the first thing to do: make sure the two is at the right position when first lauch the scene 
		// the second thing: make sure the other one position is updated on the others screen   
                
    CONVERT PRE-PLAYING SCENES TO USE TCP (2h) [] 


	(ONLY THE GAME CODE WILL USE UDP)
	CURRENTLY EVERYTHING IN THIS GAME IS USING UDP, NOW WE GONNA MIGRATE TO TCP 

	-> MAYBE WE SHOULD CREATE: 
		TCPServerConnection use by (menu, matching, lobby, choose character, choose map, loading screen) pretty much all scenes so far :v 
		and UDPServerConnection use by (the actual game scene) 

		there are only 1 main connection though TCP or UDP 
		but we can swap the 2 if we needed 
		-> there are 1 time we gonna swap from TCP to UDP: after the loading scene 



	// UPDATE THE SENDING MESSAGE CODE TO TCP 
	// IN ALL THE SCENES - basically :v 
	// CONNECT WITH THE ORIGINAL GAMEPLAY SCENE TO PLAY


    HANDLE SOME IMPORTANT MESSAGE PASSING IN SCENES LIKE (WHAT IF THE MESSAGE GET LOST WHILE SENDING): LOBBY, CHARACTER CHOOSE...  (2h) []
        -> TRY TO IMPLEMENT HOW TCP WORKS, OR USE TCP ITSELF :V 
        -> THE INPUT IS SERVER'S IP/PORT AND CLIENT'S IP/PORT

        -> EVERYTHING BEFORE THE ACTUAL PLAYING SCENE (MENU, WAITING FOR MATCH, LOBBY, CHOOSE CHARACTER, MAP SELECT, LOADING SCREEN) SHOULD BE TCP 
        -> THE ONLY UDP IS THE PLAYING SCENE 




	FIX THE CHOOSE CHARACTER SCENE AND THE CHOOSE MAP SCENE AS WELL (2h) [] (9h -> 11h)

TODO: 

DONE: 
	// ACTUALLY FIX THE SAMPLE GAMEPLAY SCENE FIRST :v  (1h) [X] 
/*
TODO: Determine what the client received and format for each of them 

How many scenes with network and its received format:  
	WAITING FOR MATCH, received format: "rid:{},pid:{}" 

	LOBBY, received format: "pid:{},stat{}"

	CHOOSE CHARACTER, received format: "pid:{},cn:{}" // cn = character name

	MAP SELECT, received format: "pid:{},mn:{}" // mn = map name 

	LOADING SCREEN, received format: "" // 

Which scenes actually received quit status of other players -> scenes after having rooms (Server other clients quit message to client)
(lobby, choose character, map select)

-> TODO: HANDLE OTHER CLIENTS QUIT MESSAGES TO THIS CLIENT 


[CLIENT TO SERVER PLAYER'S QUIT MESSAGE] ALREADY HANDLED 

 */

put the quit code to the connection singleton (2h) []
-> reuse the quit code for every scene 

